---
source: crates/escalier_parser/src/expr_parser.rs
expression: "parse(r#\"\n            do {\n                let x = 5\n                let y = 10\n                x + y\n            }\n            \"#)"
---
Do(
    Do {
        span: 13..106,
        body: Block {
            span: 15..106,
            stmts: [
                Stmt {
                    kind: Let {
                        pattern: Pattern {
                            span: 38..39,
                            kind: Ident(
                                BindingIdent {
                                    name: "x",
                                    span: 38..39,
                                    mutable: false,
                                },
                            ),
                        },
                        expr: Num(
                            Num {
                                span: 42..43,
                                value: "5",
                            },
                        ),
                        type_ann: None,
                    },
                    span: 34..43,
                },
                Stmt {
                    kind: Let {
                        pattern: Pattern {
                            span: 64..65,
                            kind: Ident(
                                BindingIdent {
                                    name: "y",
                                    span: 64..65,
                                    mutable: false,
                                },
                            ),
                        },
                        expr: Num(
                            Num {
                                span: 68..70,
                                value: "10",
                            },
                        ),
                        type_ann: None,
                    },
                    span: 60..70,
                },
                Stmt {
                    kind: Expr {
                        expr: Binary(
                            Binary {
                                span: 87..92,
                                left: Ident(
                                    Ident {
                                        name: "x",
                                        span: 87..88,
                                    },
                                ),
                                op: Plus,
                                right: Ident(
                                    Ident {
                                        name: "y",
                                        span: 91..92,
                                    },
                                ),
                            },
                        ),
                    },
                    span: 87..92,
                },
            ],
        },
    },
)
