---
source: crates/escalier_parser/src/expr_parser.rs
expression: "parse(\"x != y && z == w\")"
---
Expr {
    kind: Binary(
        Binary {
            left: Expr {
                kind: Binary(
                    Binary {
                        left: Expr {
                            kind: Ident(
                                Ident {
                                    name: "x",
                                    span: 0..1,
                                },
                            ),
                            span: 0..1,
                            inferred_type: None,
                        },
                        op: NotEquals,
                        right: Expr {
                            kind: Ident(
                                Ident {
                                    name: "y",
                                    span: 5..6,
                                },
                            ),
                            span: 5..6,
                            inferred_type: None,
                        },
                    },
                ),
                span: 0..6,
                inferred_type: None,
            },
            op: And,
            right: Expr {
                kind: Binary(
                    Binary {
                        left: Expr {
                            kind: Ident(
                                Ident {
                                    name: "z",
                                    span: 10..11,
                                },
                            ),
                            span: 10..11,
                            inferred_type: None,
                        },
                        op: Equals,
                        right: Expr {
                            kind: Ident(
                                Ident {
                                    name: "w",
                                    span: 15..16,
                                },
                            ),
                            span: 15..16,
                            inferred_type: None,
                        },
                    },
                ),
                span: 10..16,
                inferred_type: None,
            },
        },
    ),
    span: 0..16,
    inferred_type: None,
}
