---
source: crates/escalier_parser/src/expr_parser.rs
expression: "parse(\"fn () => { let x = 5 let y = 10 return x + y }\")"
---
Function(
    Function {
        span: 0..46,
        type_params: None,
        params: [],
        body: Block(
            Block {
                span: 8..46,
                stmts: [
                    Stmt {
                        kind: Let {
                            pattern: Pattern {
                                span: 15..16,
                                kind: Ident(
                                    BindingIdent {
                                        name: "x",
                                        span: 15..16,
                                        mutable: false,
                                    },
                                ),
                            },
                            expr: Num(
                                Num {
                                    span: 19..20,
                                    value: "5",
                                },
                            ),
                            type_ann: None,
                        },
                        span: 11..20,
                    },
                    Stmt {
                        kind: Let {
                            pattern: Pattern {
                                span: 25..26,
                                kind: Ident(
                                    BindingIdent {
                                        name: "y",
                                        span: 25..26,
                                        mutable: false,
                                    },
                                ),
                            },
                            expr: Num(
                                Num {
                                    span: 29..31,
                                    value: "10",
                                },
                            ),
                            type_ann: None,
                        },
                        span: 21..31,
                    },
                    Stmt {
                        kind: Return {
                            arg: Some(
                                Binary(
                                    Binary {
                                        span: 39..44,
                                        left: Ident(
                                            Ident {
                                                name: "x",
                                                span: 39..40,
                                            },
                                        ),
                                        op: Plus,
                                        right: Ident(
                                            Ident {
                                                name: "y",
                                                span: 43..44,
                                            },
                                        ),
                                    },
                                ),
                            ),
                        },
                        span: 39..44,
                    },
                ],
            },
        ),
        type_ann: None,
        is_async: false,
        is_gen: false,
    },
)
