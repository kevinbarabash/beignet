---
source: crates/escalier_parser/src/expr_parser.rs
expression: "parse(\"fn <A, B, E> (a: A, b: B) -> A throws E | string => a\")"
---
Expr {
    kind: Function(
        Function {
            type_params: Some(
                [
                    TypeParam {
                        span: 5..6,
                        name: "A",
                        bound: None,
                        default: None,
                    },
                    TypeParam {
                        span: 8..9,
                        name: "B",
                        bound: None,
                        default: None,
                    },
                    TypeParam {
                        span: 11..12,
                        name: "E",
                        bound: None,
                        default: None,
                    },
                ],
            ),
            params: [
                FuncParam {
                    pattern: Pattern {
                        kind: Ident(
                            BindingIdent {
                                name: "a",
                                span: 14..15,
                                mutable: false,
                            },
                        ),
                        span: 14..15,
                        inferred_type: None,
                    },
                    type_ann: Some(
                        TypeAnn {
                            kind: TypeRef(
                                "A",
                                None,
                            ),
                            span: 17..18,
                            inferred_type: None,
                        },
                    ),
                    optional: false,
                },
                FuncParam {
                    pattern: Pattern {
                        kind: Ident(
                            BindingIdent {
                                name: "b",
                                span: 20..21,
                                mutable: false,
                            },
                        ),
                        span: 20..21,
                        inferred_type: None,
                    },
                    type_ann: Some(
                        TypeAnn {
                            kind: TypeRef(
                                "B",
                                None,
                            ),
                            span: 23..24,
                            inferred_type: None,
                        },
                    ),
                    optional: false,
                },
            ],
            body: Expr(
                Expr {
                    kind: Ident(
                        Ident {
                            name: "a",
                            span: 52..53,
                        },
                    ),
                    span: 52..53,
                    inferred_type: None,
                },
            ),
            type_ann: Some(
                TypeAnn {
                    kind: TypeRef(
                        "A",
                        None,
                    ),
                    span: 29..30,
                    inferred_type: None,
                },
            ),
            throws: Some(
                TypeAnn {
                    kind: Union(
                        [
                            TypeAnn {
                                kind: TypeRef(
                                    "E",
                                    None,
                                ),
                                span: 38..39,
                                inferred_type: None,
                            },
                            TypeAnn {
                                kind: String,
                                span: 42..48,
                                inferred_type: None,
                            },
                        ],
                    ),
                    span: 38..48,
                    inferred_type: None,
                },
            ),
            is_async: false,
            is_gen: false,
        },
    ),
    span: 0..53,
    inferred_type: None,
}
