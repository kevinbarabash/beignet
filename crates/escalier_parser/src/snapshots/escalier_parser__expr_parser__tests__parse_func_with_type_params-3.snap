---
source: crates/escalier_parser/src/expr_parser.rs
expression: "parse(\"fn <A: number, B: number> (a: A, b: B): A => a\")"
---
Function(
    Function {
        span: 0..46,
        type_params: Some(
            [
                TypeParam {
                    span: 5..14,
                    t: TypeAnn {
                        kind: TypeRef(
                            "A",
                            None,
                        ),
                        span: 4..5,
                    },
                    bound: Some(
                        TypeAnn {
                            kind: Number,
                            span: 7..13,
                        },
                    ),
                    default: None,
                },
                TypeParam {
                    span: 16..25,
                    t: TypeAnn {
                        kind: TypeRef(
                            "B",
                            None,
                        ),
                        span: 15..16,
                    },
                    bound: Some(
                        TypeAnn {
                            kind: Number,
                            span: 18..24,
                        },
                    ),
                    default: None,
                },
            ],
        ),
        params: [
            FuncParam {
                pattern: Pattern {
                    span: 27..28,
                    kind: Ident(
                        BindingIdent {
                            name: "a",
                            span: 27..28,
                            mutable: false,
                        },
                    ),
                },
                type_ann: Some(
                    TypeAnn {
                        kind: TypeRef(
                            "A",
                            None,
                        ),
                        span: 30..31,
                    },
                ),
                optional: false,
            },
            FuncParam {
                pattern: Pattern {
                    span: 33..34,
                    kind: Ident(
                        BindingIdent {
                            name: "b",
                            span: 33..34,
                            mutable: false,
                        },
                    ),
                },
                type_ann: Some(
                    TypeAnn {
                        kind: TypeRef(
                            "B",
                            None,
                        ),
                        span: 36..37,
                    },
                ),
                optional: false,
            },
        ],
        body: Expr(
            Ident(
                Ident {
                    name: "a",
                    span: 45..46,
                },
            ),
        ),
        type_ann: Some(
            TypeAnn {
                kind: TypeRef(
                    "A",
                    None,
                ),
                span: 40..41,
            },
        ),
        is_async: false,
        is_gen: false,
    },
)
