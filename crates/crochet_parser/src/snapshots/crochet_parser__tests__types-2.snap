---
source: crates/crochet_parser/src/lib.rs
expression: "parse(\"declare let get_bar: (foo: Foo) => T;\")"
---
Ok(
    Program {
        body: [
            VarDecl {
                span: 8..37,
                pattern: Pattern {
                    span: 12..19,
                    kind: Ident(
                        BindingIdent {
                            id: Ident {
                                span: 12..19,
                                name: "get_bar",
                            },
                        },
                    ),
                    inferred_type: None,
                },
                type_ann: Some(
                    TypeAnn {
                        kind: Lam(
                            LamType {
                                span: 21..36,
                                params: [
                                    TypeAnnFnParam {
                                        pat: Ident(
                                            EFnParamBindingIdent {
                                                span: 22..25,
                                                id: Ident {
                                                    span: 22..25,
                                                    name: "foo",
                                                },
                                            },
                                        ),
                                        type_ann: TypeAnn {
                                            kind: TypeRef(
                                                TypeRef {
                                                    span: 27..30,
                                                    name: "Foo",
                                                    type_args: None,
                                                },
                                            ),
                                            span: 27..30,
                                            inferred_type: None,
                                        },
                                        optional: false,
                                    },
                                ],
                                ret: TypeAnn {
                                    kind: TypeRef(
                                        TypeRef {
                                            span: 35..36,
                                            name: "T",
                                            type_args: None,
                                        },
                                    ),
                                    span: 35..36,
                                    inferred_type: None,
                                },
                                type_params: None,
                            },
                        ),
                        span: 21..36,
                        inferred_type: None,
                    },
                ),
                init: None,
                declare: true,
            },
        ],
    },
)
