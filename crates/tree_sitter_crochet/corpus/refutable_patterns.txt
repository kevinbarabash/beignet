================================================================================
Pattern matching (basic patterns)
================================================================================

let bar = match (foo) {
  {x, y: b, z: 5, ...rest} -> "object",
  [a, _, ...rest] -> "array",
  "string" -> "string",
  true -> "true",
  false -> "false",
  n -> "variable",
  _ -> "wildcard"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (match_expression
        (identifier)
        (match_arms
          (match_arm
            (refutable_pattern
              (refutable_object_pattern
                (shorthand_property_identifier_pattern)
                (refutable_pair_pattern
                  (property_identifier)
                  (refutable_pattern
                    (identifier)))
                (refutable_pair_pattern
                  (property_identifier)
                  (refutable_pattern
                    (number)))
                (refutable_rest_pattern
                  (identifier))))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (refutable_array_pattern
                (refutable_pattern
                  (identifier))
                (refutable_pattern
                  (identifier))
                (refutable_rest_pattern
                  (identifier))))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (string
                (string_fragment)))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (true))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (false))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (string
              (string_fragment))))))))

================================================================================
Pattern matching (nested patterns)
================================================================================

let bar = match (foo) {
  {a: {b: {c}}} -> "object",
  _ -> "fallthrough"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (match_expression
        (identifier)
        (match_arms
          (match_arm
            (refutable_pattern
              (refutable_object_pattern
                (refutable_pair_pattern
                  (property_identifier)
                  (refutable_pattern
                    (refutable_object_pattern
                      (refutable_pair_pattern
                        (property_identifier)
                        (refutable_pattern
                          (refutable_object_pattern
                            (shorthand_property_identifier_pattern)))))))))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (string
              (string_fragment))))))))

================================================================================
Pattern matching ("is" patterns)
================================================================================

let bar = match (foo) {
  n is number -> "number",
  {a: a is Array} -> "Array",
  _ -> "fallthrough"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (match_expression
        (identifier)
        (match_arms
          (match_arm
            (refutable_pattern
              (refutable_is_pattern
                (identifier)
                (identifier)))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (refutable_object_pattern
                (refutable_pair_pattern
                  (property_identifier)
                  (refutable_pattern
                    (refutable_is_pattern
                      (identifier)
                      (identifier))))))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (string
              (string_fragment))))))))

================================================================================
Pattern matching (with guards)
================================================================================

let bar = match (foo) {
  1 -> "one",
  2 -> "two",
  n if (n < 5) -> "few",
  _ -> "many"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (match_expression
        (identifier)
        (match_arms
          (match_arm
            (refutable_pattern
              (number))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (number))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (binary_expression
              (identifier)
              (number))
            (string
              (string_fragment)))
          (match_arm
            (refutable_pattern
              (identifier))
            (string
              (string_fragment))))))))

================================================================================
if-let (basic patterns)
================================================================================

let bar = if (let {x, y: b, ...rest} = foo) {
  "object"
} else if (let [a, _, ...rest] = foo) {
  "array"
} else {
  "other"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (if_expression
        (let_expression
          (refutable_pattern
            (refutable_object_pattern
              (shorthand_property_identifier_pattern)
              (refutable_pair_pattern
                (property_identifier)
                (refutable_pattern
                  (identifier)))
              (refutable_rest_pattern
                (identifier))))
          (identifier))
        (statement_block
          (expression
            (string
              (string_fragment))))
        (else_clause
          (if_expression
            (let_expression
              (refutable_pattern
                (refutable_array_pattern
                  (refutable_pattern
                    (identifier))
                  (refutable_pattern
                    (identifier))
                  (refutable_rest_pattern
                    (identifier))))
              (identifier))
            (statement_block
              (expression
                (string
                  (string_fragment))))
            (else_clause
              (statement_block
                (expression
                  (string
                    (string_fragment)))))))))))

================================================================================
if-let ("is" pattern)
================================================================================

let bar = if (let {x: x is string} = foo) {
  "object"
} else if (let [a is Array, _, ...rest] = foo) {
  "array"
} else {
  "other"
};

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (identifier)
      (if_expression
        (let_expression
          (refutable_pattern
            (refutable_object_pattern
              (refutable_pair_pattern
                (property_identifier)
                (refutable_pattern
                  (refutable_is_pattern
                    (identifier)
                    (identifier))))))
          (identifier))
        (statement_block
          (expression
            (string
              (string_fragment))))
        (else_clause
          (if_expression
            (let_expression
              (refutable_pattern
                (refutable_array_pattern
                  (refutable_pattern
                    (refutable_is_pattern
                      (identifier)
                      (identifier)))
                  (refutable_pattern
                    (identifier))
                  (refutable_rest_pattern
                    (identifier))))
              (identifier))
            (statement_block
              (expression
                (string
                  (string_fragment))))
            (else_clause
              (statement_block
                (expression
                  (string
                    (string_fragment)))))))))))
