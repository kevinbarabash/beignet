================================================================================
Object destructuring assignments
================================================================================

let {a, b: {c: d}, ...{e, f: _}} = object;

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (object_pattern
        (shorthand_property_identifier_pattern
          (identifier))
        (pair_pattern
          (property_identifier)
          (object_pattern
            (pair_pattern
              (property_identifier)
              (binding_identifier
                (identifier)))))
        (rest_pattern
          (object_pattern
            (shorthand_property_identifier_pattern
              (identifier))
            (pair_pattern
              (property_identifier)
              (wildcard)))))
      (identifier))))

================================================================================
Object destructuring parameters
================================================================================

function a ({b, c}, {d}) {}

--------------------------------------------------------------------------------

(program
  (function_declaration
    (identifier)
    (formal_parameters
      (required_parameter
        (object_pattern
          (shorthand_property_identifier_pattern
            (identifier))
          (shorthand_property_identifier_pattern
            (identifier))))
      (required_parameter
        (object_pattern
          (shorthand_property_identifier_pattern
            (identifier)))))
    (statement_block)))

================================================================================
Array destructuring assignments
================================================================================

let [a, _, b, ...[c, _, d]] = array;

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (array_pattern
        (binding_identifier
          (identifier))
        (wildcard)
        (binding_identifier
          (identifier))
        (rest_pattern
          (array_pattern
            (binding_identifier
              (identifier))
            (wildcard)
            (binding_identifier
              (identifier)))))
      (identifier))))

================================================================================
Object destructuring patterns w/ default values
================================================================================

let {a: b = c} = object;
for await (let {a: {b} = object} of asyncIter) {}
function a({b = true}, [c, d = false]) {}
function b({c} = {}) {}

--------------------------------------------------------------------------------

(program
  (lexical_declaration
    (variable_declarator
      (object_pattern
        (object_assignment_pattern
          (pair_pattern
            (property_identifier)
            (binding_identifier
              (identifier)))
          (identifier)))
      (identifier)))
  (for_in_statement
    (object_pattern
      (object_assignment_pattern
        (pair_pattern
          (property_identifier)
          (object_pattern
            (shorthand_property_identifier_pattern
              (identifier))))
        (identifier)))
    (identifier)
    (statement_block))
  (function_declaration
    (identifier)
    (formal_parameters
      (required_parameter
        (object_pattern
          (object_assignment_pattern
            (shorthand_property_identifier_pattern
              (identifier))
            (true))))
      (required_parameter
        (array_pattern
          (binding_identifier
            (identifier))
          (assignment_pattern
            (binding_identifier
              (identifier))
            (false)))))
    (statement_block))
  (function_declaration
    (identifier)
    (formal_parameters
      (required_parameter
        (object_pattern
          (shorthand_property_identifier_pattern
            (identifier)))
        (object)))
    (statement_block)))
