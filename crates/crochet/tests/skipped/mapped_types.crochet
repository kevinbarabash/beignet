// NOTE: This is skipped b/c we need to figure out how to handle object types
// with a mix of mutable and immutable fields.
type Obj = {a: number, b?: string, mut c: boolean, mut d?: number};
type PartialObj = Partial<Obj>;

let partial_obj: PartialObj = {b: "hello"};

type Custom<T> = {
    +mut [P in keyof T]+?: T[P];
};
let custom_obj: Custom<Obj> = {b: "hello"};
custom_obj.b = "world";
