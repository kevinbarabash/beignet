name: CI

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "**.esc"
      - "**.js"
      - "**.rs"
      - ".github/workflows/ci.yml"

jobs:
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-clippy

      - name: Clippy
        run: cargo clippy --all-features --no-deps

  tree-sitter-test:
    name: Test tree-sitter Parser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install node_modules
        working-directory: ./crates/tree_sitter_escalier
        run: yarn install --frozen-lockfile

      - name: Generate grammar
        working-directory: ./crates/tree_sitter_escalier
        run: yarn generate

      - name: Run tests
        working-directory: ./crates/tree_sitter_escalier
        run: yarn test

  build-wasm:
    name: Build WASM bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install wasi-sdk
        run: |
          export WASI_VERSION=16
          export WASI_VERSION_FULL=${WASI_VERSION}.0
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
          tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz
          export WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}
          echo "$WASI_SDK_PATH/bin" >> $GITHUB_PATH

      - name: Install wasm32-wasi target for rust
        run: rustup target add wasm32-wasi

      - name: Install node_modules
        run: yarn install --frozen-lockfile

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            node_modules/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-build-wasm

      - name: Build .wasm Bundle
        run: yarn build-wasm

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs and npm
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install node_modules
        run: yarn install --frozen-lockfile

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-test

      - name: Test
        run: cargo test

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/escalier-lang/rust-grcov
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Nodejs and npm
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: Install node_modules
        run: yarn install --frozen-lockfile

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-coverage

      - name: Test
        run: CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw' cargo test

      - name: Create Folder
        run: mkdir -p target/coverage

      - name: Generate lcov
        run: grcov . --exclude-unreachable-branches --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" --ignore "target/**" --ignore "*_test.rs" -o target/coverage/tests.lcov

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          directory: target/coverage
